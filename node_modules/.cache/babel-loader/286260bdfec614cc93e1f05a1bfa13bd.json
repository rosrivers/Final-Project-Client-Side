{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eliana\\\\VSCODE\\\\Final_Project\\\\Final-Project-Client-Side\\\\src\\\\components\\\\containers\\\\AllCampusesContainer.js\";\n/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from back-end database\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(AllCampusesView, {\n      allCampuses: this.props.allCampuses,\n      deleteCampus: this.props.deleteCampus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId))\n  };\n};\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired\n};\n\n// Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","map":{"version":3,"names":["Header","Component","PropTypes","connect","fetchAllCampusesThunk","AllCampusesView","AllCampusesContainer","componentDidMount","console","log","props","fetchAllCampuses","render","React","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","allCampuses","deleteCampus","mapState","state","mapDispatch","dispatch","campusId","deleteCampusThunk","propTypes","array","isRequired","func"],"sources":["C:/Users/Eliana/VSCODE/Final_Project/Final-Project-Client-Side/src/components/containers/AllCampusesContainer.js"],"sourcesContent":["/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\r\nimport { AllCampusesView } from \"../views\";\r\n\r\nclass AllCampusesContainer extends Component {\r\n  // Get all campuses data from back-end database\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <AllCampusesView\r\n          allCampuses={this.props.allCampuses}\r\n          deleteCampus={this.props.deleteCampus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n  };\r\n};  \r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\r\n  };\r\n};\r\n\r\n// Type check props;\r\nAllCampusesContainer.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n  fetchAllCampuses: PropTypes.func.isRequired,\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,eAAe,QAAQ,UAAU;AAE1C,MAAMC,oBAAoB,SAASL,SAAS,CAAC;EAC3C;EACAM,iBAAiBA,CAAA,EAAG;IAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;IACvB,IAAI,CAACA,KAAK,CAACC,gBAAgB,CAAC,CAAC;EAC/B;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,oBACEC,KAAA,CAAAC,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACEP,KAAA,CAAAC,aAAA,CAACd,MAAM;MAAAe,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,eACVP,KAAA,CAAAC,aAAA,CAACT,eAAe;MACdgB,WAAW,EAAE,IAAI,CAACX,KAAK,CAACW,WAAY;MACpCC,YAAY,EAAE,IAAI,CAACZ,KAAK,CAACY,YAAa;MAAAP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACvC,CACE,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMG,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAAG;EACnC,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMI,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLf,gBAAgB,EAAEA,CAAA,KAAMe,QAAQ,CAACtB,qBAAqB,CAAC,CAAC,CAAC;IACzDkB,YAAY,EAAGK,QAAQ,IAAKD,QAAQ,CAACE,iBAAiB,CAACD,QAAQ,CAAC;EAClE,CAAC;AACH,CAAC;;AAED;AACArB,oBAAoB,CAACuB,SAAS,GAAG;EAC/BR,WAAW,EAAEnB,SAAS,CAAC4B,KAAK,CAACC,UAAU;EACvCpB,gBAAgB,EAAET,SAAS,CAAC8B,IAAI,CAACD;AACnC,CAAC;;AAED;AACA;AACA;AACA,eAAe5B,OAAO,CAACoB,QAAQ,EAAEE,WAAW,CAAC,CAACnB,oBAAoB,CAAC"},"metadata":{},"sourceType":"module"}