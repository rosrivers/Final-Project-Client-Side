{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eliana\\\\VSCODE\\\\Final_Project\\\\Final-Project-Client-Side\\\\src\\\\components\\\\containers\\\\CampusContainer.js\";\n/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nclass CampusContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.handleDelete = async event => {\n      await this.props.deleteCampus(this.props.campus.id);\n      this.setState({\n        redirect: true\n      });\n    };\n  }\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CampusView, {\n      campus: this.props.campus,\n      handleDelete: this.handleDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId))\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","CampusView","CampusContainer","constructor","args","handleDelete","event","props","deleteCampus","campus","id","setState","redirect","componentDidMount","fetchCampus","match","params","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapState","state","mapDispatch","dispatch","campusId","deleteCampusThunk"],"sources":["C:/Users/Eliana/VSCODE/Final_Project/Final-Project-Client-Side/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCampusThunk } from \"../../store/thunks\";\r\n\r\nimport { CampusView } from \"../views\";\r\n\r\nclass CampusContainer extends Component {\r\n  // Get the specific campus data from back-end database\r\n  componentDidMount() {\r\n    // Get campus ID from URL (API link)\r\n    this.props.fetchCampus(this.props.match.params.id);\r\n  }\r\n    handleDelete = async (event) => {\r\n    await this.props.deleteCampus(this.props.campus.id);\r\n    this.setState({ redirect: true });\r\n  }\r\n  // Render a Campus view by passing campus data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <CampusView campus={this.props.campus}\r\n   handleDelete={this.handleDelete}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(CampusContainer);\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,SAASC,UAAU,QAAQ,UAAU;AAErC,MAAMC,eAAe,SAASJ,SAAS,CAAC;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAMpCC,YAAY,GAAG,MAAOC,KAAK,IAAK;MAChC,MAAM,IAAI,CAACC,KAAK,CAACC,YAAY,CAAC,IAAI,CAACD,KAAK,CAACE,MAAM,CAACC,EAAE,CAAC;MACnD,IAAI,CAACC,QAAQ,CAAC;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IACnC,CAAC;EAAA;EARD;EACAC,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACN,KAAK,CAACO,WAAW,CAAC,IAAI,CAACP,KAAK,CAACQ,KAAK,CAACC,MAAM,CAACN,EAAE,CAAC;EACpD;EAKA;EACAO,MAAMA,CAAA,EAAG;IACP,oBACEpB,KAAA,CAAAqB,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACE3B,KAAA,CAAAqB,aAAA,CAACtB,MAAM;MAAAuB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,eACV3B,KAAA,CAAAqB,aAAA,CAACjB,UAAU;MAACQ,MAAM,EAAE,IAAI,CAACF,KAAK,CAACE,MAAO;MAC3CJ,YAAY,EAAE,IAAI,CAACA,YAAa;MAAAc,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAC,CACzB,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLjB,MAAM,EAAEiB,KAAK,CAACjB,MAAM,CAAG;EACzB,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMkB,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLd,WAAW,EAAGJ,EAAE,IAAKkB,QAAQ,CAAC5B,gBAAgB,CAACU,EAAE,CAAC,CAAC;IACnDF,YAAY,EAAGqB,QAAQ,IAAKD,QAAQ,CAACE,iBAAiB,CAACD,QAAQ,CAAC;EAClE,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,eAAe9B,OAAO,CAAC0B,QAAQ,EAAEE,WAAW,CAAC,CAACzB,eAAe,CAAC"},"metadata":{},"sourceType":"module"}