{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eliana\\\\VSCODE\\\\Final_Project\\\\Final-Project-Client-Side\\\\src\\\\components\\\\containers\\\\NewCampusContainer.js\";\n/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\nimport { editCampusThunk } from '../../store/thunks';\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user click the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n      if (this.state.imageUrl === '') {\n        this.setState({\n          imageUrl: 'https://www.ccny.cuny.edu/sites/default/files/styles/section_background_image_1440x900/public/2019-08/carlosparker_harrishall.jpg'\n        });\n      }\n\n      // Update state, and trigger redirect to show the new campus\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        imageUrl: this.state.imageUrl,\n        description: this.state.description\n      };\n\n      // Add new campus in back-end database\n      let newCampus = await this.props.addCampus(campus);\n\n      // Update state, and trigger redirect to show the new campus\n      this.setState({\n        name: '',\n        address: '',\n        imageUrl: '',\n        description: '',\n        redirect: true,\n        redirectId: newCampus.id\n      });\n    };\n    this.state = {\n      name: '',\n      address: '',\n      description: '',\n      imageUrl: '',\n      campusId: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new campus input form\n  render() {\n    // Redirect to new campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: `/campus/${this.state.redirectId}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      });\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NewCampusView, {\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }));\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n};\n\n// Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewCampusView","addCampusThunk","editCampusThunk","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","state","imageUrl","campus","address","description","newCampus","addCampus","redirect","redirectId","id","campusId","componentWillUnmount","render","React","createElement","to","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapDispatch","dispatch"],"sources":["C:/Users/Eliana/VSCODE/Final_Project/Final-Project-Client-Side/src/components/containers/NewCampusContainer.js"],"sourcesContent":["/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewCampusView from '../views/NewCampusView';\r\nimport { addCampusThunk } from '../../store/thunks';\r\nimport { editCampusThunk } from '../../store/thunks';\r\nclass NewCampusContainer extends Component {\r\n    // Initialize state\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            address: '',\r\n            description: '',\r\n            imageUrl: '',\r\n            campusId: null,\r\n            redirect: false,\r\n            redirectId: null\r\n        };\r\n    }\r\n\r\n    // Capture input data when it is entered\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    // Take action after user click the submit button\r\n    handleSubmit = async event => {\r\n        event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n        if (this.state.imageUrl === '') {\r\n            this.setState({\r\n                imageUrl: 'https://www.ccny.cuny.edu/sites/default/files/styles/section_background_image_1440x900/public/2019-08/carlosparker_harrishall.jpg'\r\n            })\r\n        }\r\n\r\n        // Update state, and trigger redirect to show the new campus\r\n        let campus = {\r\n            name: this.state.name,\r\n            address: this.state.address,\r\n            imageUrl: this.state.imageUrl,\r\n            description: this.state.description\r\n        };\r\n\r\n        // Add new campus in back-end database\r\n        let newCampus = await this.props.addCampus(campus);\r\n\r\n        // Update state, and trigger redirect to show the new campus\r\n        this.setState({\r\n            name: '',\r\n            address: '',\r\n            imageUrl: '',\r\n            description: '',\r\n            redirect: true,\r\n            redirectId: newCampus.id\r\n        });\r\n    }\r\n\r\n    // Unmount when the component is being removed from the DOM:\r\n    componentWillUnmount() {\r\n        this.setState({ redirect: false, redirectId: null });\r\n    }\r\n\r\n    // Render new campus input form\r\n    render() {\r\n        // Redirect to new campus's page after submit\r\n        if (this.state.redirect) {\r\n            return (<Redirect to={`/campus/${this.state.redirectId}`} />)\r\n        }\r\n\r\n        // Display the input form via the corresponding View component\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <NewCampusView\r\n                    handleChange={this.handleChange}\r\n                    handleSubmit={this.handleSubmit}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return ({\r\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewCampusContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}