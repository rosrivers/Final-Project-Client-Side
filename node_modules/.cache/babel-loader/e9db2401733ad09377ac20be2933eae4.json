{"ast":null,"code":"/*==================================================\r\n/src/store/index.js\r\n\r\nIt contains the necessities and accessories for constructing the Redux Store.\r\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \r\n================================================== */\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\n// Import all Reducers from the barrel file (/src/store/reducers/index.js)\nimport * as reducers from './reducers';\n\n// Construct the Redux Store:\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \n// access the states in all Reducers of the app.\nconst rootReducer = combineReducers(reducers);\n// Create a logger middleware to log dispatched Actions in console,\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\nconst logger = createLogger({\n  collapsed: true\n}); // Collapse console messages when displayed\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\n// Export the Redux Store by default, which will be provided to and injected within our entire application\nexport default store;","map":{"version":3,"names":["combineReducers","applyMiddleware","createStore","createLogger","thunk","reducers","rootReducer","logger","collapsed","store"],"sources":["C:/Users/Eliana/VSCODE/Final_Project/Final-Project-Client-Side/src/store/index.js"],"sourcesContent":["/*==================================================\r\n/src/store/index.js\r\n\r\nIt contains the necessities and accessories for constructing the Redux Store.\r\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \r\n================================================== */\r\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Import all Reducers from the barrel file (/src/store/reducers/index.js)\r\nimport * as reducers from './reducers';\r\n\r\n// Construct the Redux Store:\r\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \r\n// access the states in all Reducers of the app.\r\nconst rootReducer = combineReducers(reducers);  \r\n// Create a logger middleware to log dispatched Actions in console,\r\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\r\nconst logger = createLogger({ collapsed: true });  // Collapse console messages when displayed\r\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\n// Export the Redux Store by default, which will be provided to and injected within our entire application\r\nexport default store;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAe,EAAEC,eAAe,EAAEC,WAAW,QAAQ,OAAO;AACrE,SAASC,YAAY,QAAQ,cAAc;AAC3C,OAAOC,KAAK,MAAM,aAAa;;AAE/B;AACA,OAAO,KAAKC,QAAQ,MAAM,YAAY;;AAEtC;AACA;AACA;AACA,MAAMC,WAAW,GAAGN,eAAe,CAACK,QAAQ,CAAC;AAC7C;AACA;AACA,MAAME,MAAM,GAAGJ,YAAY,CAAC;EAAEK,SAAS,EAAE;AAAK,CAAC,CAAC,CAAC,CAAE;AACnD;AACA,MAAMC,KAAK,GAAGP,WAAW,CAACI,WAAW,EAAEL,eAAe,CAACG,KAAK,EAAEG,MAAM,CAAC,CAAC;;AAEtE;AACA,eAAeE,KAAK"},"metadata":{},"sourceType":"module"}