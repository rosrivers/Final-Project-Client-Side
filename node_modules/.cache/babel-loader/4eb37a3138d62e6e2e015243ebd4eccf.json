{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eliana\\\\VSCODE\\\\Final_Project\\\\Final-Project-Client-Side\\\\src\\\\components\\\\containers\\\\NewStudentContainer.js\";\n/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user click the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa\n      };\n\n      // Add new student in back-end database\n      let newStudent = await this.props.addStudent(student);\n\n      // Update state, and trigger redirect to show the new student\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        campusId: null,\n        email: \"\",\n        imageUrl: \"\",\n        gpa: 0.0,\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      campusId: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: `/student/${this.state.redirectId}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }\n      });\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(NewStudentView, {\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","state","lastname","campusId","email","imageUrl","gpa","newStudent","addStudent","redirect","redirectId","id","componentWillUnmount","render","React","createElement","to","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapDispatch","dispatch"],"sources":["C:/Users/Eliana/VSCODE/Final_Project/Final-Project-Client-Side/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewStudentView from '../views/NewStudentView';\r\nimport { addStudentThunk } from '../../store/thunks';\r\n\r\nclass NewStudentContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      campusId: null, \r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let student = {\r\n      firstname: this.state.firstname,\r\n      lastname: this.state.lastname,\r\n      campusId: this.state.campusId,\r\n      email: this.state.email,\r\n      imageUrl: this.state.imageUrl,\r\n      gpa: this.state.gpa,\r\n    };\r\n    \r\n    // Add new student in back-end database\r\n    let newStudent = await this.props.addStudent(student);\r\n\r\n    // Update state, and trigger redirect to show the new student\r\n    this.setState({\r\n      firstname: \"\",\r\n      lastname: \"\",\r\n      campusId: null,\r\n      email: \"\",\r\n      imageUrl: \"\",\r\n      gpa: 0.0,\r\n      redirect: true,\r\n      redirectId: newStudent.id\r\n    });\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewStudentView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewStudentContainer);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}